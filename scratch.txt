from util import levenshteinDistance as distance

def inlinequery(update, context):
    logger.info('Answering inline query')
    query = update.inline_query.query
    results_list = list()

    facts = all_facts.get_facts()
    search_results = [
        f for f in facts
        if distance(query, f, ignore_case=True) < 3 or query.lower() in f.lower()
    ]

    if len(search_results) > 0:
        facts = search_results[0:49]
    else:
        # 50 random facts
        range_start = random.randint(0, len(facts))
        facts = facts[range_start:range_start + 49]
        results_list.append(
            InlineQueryResultArticle(
                id=uuid4(),
                title="No search results for '{}'.".format(query),
                input_message_content=InputTextMessageContent(
                    message_text=get_random_fact()),
                description='Use a random fact below'))

    for fact in facts:
        results_list.append(
            InlineQueryResultArticle(
                id=uuid4(),
                title='BTS Fact',
                input_message_content=InputTextMessageContent(
                    message_text=fact),
                description=fact))

    context.bot.answerInlineQuery(update.inline_query.id, results=results_list)
